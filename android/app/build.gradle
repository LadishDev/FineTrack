apply plugin: 'com.android.application'

android {
    namespace "dev.ladish.finetrack"
    compileSdk rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "dev.ladish.finetrack"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    signingConfigs {
        release {
            def storePath = System.getenv("ANDROID_KEYSTORE_PATH")
            def storePassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
            def keyAlias = System.getenv("ANDROID_KEY_ALIAS")
            def keyPassword = System.getenv("ANDROID_KEYSTORE_PASSWORD")
            println "Keystore Path: ${storePath}"
            println "Keystore Password: ${storePassword}"
            println "Key Alias: ${keyAlias}"
            println "Key Password: ${keyPassword}"
            if (storePath && storePassword && keyAlias && keyPassword) {
                storeFile = new File(storePath)
                storePassword = storePassword
                keyAlias = keyAlias
                keyPassword = keyPassword
            }
        }
    }
    buildTypes {
        debug {
            // No signing config needed for debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (System.getenv("ANDROID_KEYSTORE_PATH")) {
                signingConfig signingConfigs.release
            }
        }
    }
}

repositories {
    flatDir{
    dirs 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    implementation project(':capacitor-android')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    // Removed capacitor-cordova-android-plugins
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}
